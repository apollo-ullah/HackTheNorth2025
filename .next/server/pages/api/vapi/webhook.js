"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/vapi/webhook";
exports.ids = ["pages/api/vapi/webhook"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvapi%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvapi%2Fwebhook.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvapi%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvapi%2Fwebhook.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/vapi/webhook.ts */ \"(api)/./pages/api/vapi/webhook.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/vapi/webhook\",\n        pathname: \"/api/vapi/webhook\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_vapi_webhook_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnZhcGklMkZ3ZWJob29rJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZ2YXBpJTJGd2ViaG9vay50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN3RDtBQUN4RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsdURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHVEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3N0YWN5LWFpLXNhZmV0eS1jb21wYW5pb24vP2I5OTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS92YXBpL3dlYmhvb2sudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS92YXBpL3dlYmhvb2tcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS92YXBpL3dlYmhvb2tcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvapi%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvapi%2Fwebhook.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/vapi/webhook.ts":
/*!***********************************!*\
  !*** ./pages/api/vapi/webhook.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"openai\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([openai__WEBPACK_IMPORTED_MODULE_0__]);\nopenai__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nasync function sendSms(phone, message) {\n    try {\n        const accountSid = process.env.TWILIO_ACCOUNT_SID;\n        const authToken = process.env.TWILIO_AUTH_TOKEN;\n        const fromNumber = process.env.TWILIO_NUMBER;\n        if (!accountSid || !authToken || !fromNumber) return {\n            success: false,\n            error: \"Twilio not configured\"\n        };\n        const basic = Buffer.from(`${accountSid}:${authToken}`).toString(\"base64\");\n        const body = new URLSearchParams({\n            From: fromNumber,\n            To: phone,\n            Body: message\n        });\n        const resp = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Messages.json`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${basic}`,\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body\n        });\n        const data = await resp.json();\n        if (!resp.ok) return {\n            success: false,\n            error: data?.message || \"Twilio SMS failed\"\n        };\n        return {\n            success: true,\n            sid: data.sid\n        };\n    } catch (e) {\n        return {\n            success: false,\n            error: e?.message || \"SMS error\"\n        };\n    }\n}\nasync function createEmergencyConference(script, userPhone, lat, lng) {\n    const accountSid = process.env.TWILIO_ACCOUNT_SID;\n    const authToken = process.env.TWILIO_AUTH_TOKEN;\n    const fromNumber = process.env.TWILIO_NUMBER;\n    const dispatchNumber = process.env.DEMO_EMERGENCY_NUMBER || \"+14383761217\";\n    if (!accountSid || !authToken || !fromNumber) {\n        return {\n            success: false,\n            error: \"Twilio not configured\"\n        };\n    }\n    const basic = Buffer.from(`${accountSid}:${authToken}`).toString(\"base64\");\n    const conferenceId = `emergency-${Date.now()}`;\n    console.log(\"\\uD83C\\uDFAF Creating 3-way emergency conference:\", conferenceId);\n    console.log(\"\\uD83C\\uDFAF Connecting user:\", userPhone, \"and dispatch:\", dispatchNumber);\n    try {\n        // 1. Call the user and put them in conference\n        const userTwiml = `<Response>\n      <Say voice=\"alice\">You are being connected to emergency dispatch. Please hold.</Say>\n      <Dial>\n        <Conference waitMusic=\"false\" waitUrl=\"\">${conferenceId}</Conference>\n      </Dial>\n    </Response>`;\n        const userBody = new URLSearchParams({\n            From: fromNumber,\n            To: userPhone,\n            Twiml: userTwiml\n        });\n        const userCall = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Calls.json`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${basic}`,\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: userBody\n        });\n        // 2. Call dispatch and put them in the same conference\n        const dispatchTwiml = `<Response>\n      <Say voice=\"alice\" rate=\"slow\">\n        This is Stacy AI emergency dispatch system. \n        ${script}\n        ${lat && lng ? `The caller's location is approximately latitude ${lat}, longitude ${lng}.` : \"Location data is not available.\"}\n        Connecting you to the emergency caller now.\n      </Say>\n      <Dial>\n        <Conference waitMusic=\"false\" waitUrl=\"\">${conferenceId}</Conference>\n      </Dial>\n    </Response>`;\n        const dispatchBody = new URLSearchParams({\n            From: fromNumber,\n            To: dispatchNumber,\n            Twiml: dispatchTwiml\n        });\n        const dispatchCall = await fetch(`https://api.twilio.com/2010-04-01/Accounts/${accountSid}/Calls.json`, {\n            method: \"POST\",\n            headers: {\n                Authorization: `Basic ${basic}`,\n                \"Content-Type\": \"application/x-www-form-urlencoded\"\n            },\n            body: dispatchBody\n        });\n        const userResult = await userCall.json();\n        const dispatchResult = await dispatchCall.json();\n        console.log(\"\\uD83C\\uDFAF Conference calls initiated:\", {\n            user: userResult.sid,\n            dispatch: dispatchResult.sid,\n            conference: conferenceId\n        });\n        return {\n            success: true,\n            conferenceId,\n            userCallSid: userResult.sid,\n            dispatchCallSid: dispatchResult.sid,\n            message: \"Emergency conference created - all parties will be connected\"\n        };\n    } catch (error) {\n        console.error(\"\\uD83D\\uDEA8 Conference creation failed:\", error);\n        return {\n            success: false,\n            error: error?.message || \"Conference creation failed\"\n        };\n    }\n}\n// Basic in-memory de-dupe so we don't double-trigger actions per call\nconst triggeredByCallId = new Map();\nfunction wasTriggered(callId, action) {\n    if (!callId) return false;\n    const set = triggeredByCallId.get(callId) || new Set();\n    const had = set.has(action);\n    set.add(action);\n    triggeredByCallId.set(callId, set);\n    return had;\n}\n// 🧠 OpenAI BRAIN - Handles ALL thinking, responses, and tool calling\nasync function processWithOpenAIBrain(callId, conversation, lat, lng) {\n    try {\n        console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN processing conversation for call:\", callId);\n        // Rate limiting - don't process the same conversation multiple times\n        const conversationHash = JSON.stringify(conversation);\n        const lastProcessedKey = `${callId}:last_processed`;\n        const lastProcessed = triggeredByCallId.get(lastProcessedKey);\n        if (lastProcessed && lastProcessed.has(conversationHash)) {\n            console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN: Already processed this conversation, skipping\");\n            return {\n                response: null\n            };\n        }\n        // Mark this conversation as processed\n        const processedSet = lastProcessed || new Set();\n        processedSet.add(conversationHash);\n        triggeredByCallId.set(lastProcessedKey, processedSet);\n        const openaiApiKey = process.env.OPENAI_API_KEY;\n        if (!openaiApiKey) {\n            console.warn(\"⚠️ OpenAI API key not configured\");\n            return {\n                response: \"I'm having trouble connecting to my brain. Please try again.\"\n            };\n        }\n        const openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n            apiKey: openaiApiKey\n        });\n        // Get conversation history\n        const messages = conversation.map((msg)=>({\n                role: msg.role === \"user\" ? \"user\" : \"assistant\",\n                content: msg.content || msg.message || \"\"\n            }));\n        // Add Stacy's system prompt\n        const systemPrompt = `You are Stacy, an AI safety companion and emergency dispatcher.\n\nCONTEXT:\n- This is a voice call via VAPI (you are the brain, VAPI is just voice I/O)\n- Location: ${lat && lng ? `${lat}, ${lng}` : \"Unknown\"}\n- Call ID: ${callId}\n\nTOOLS AVAILABLE:\n- call_demo_police: Call demo dispatcher at +14383761217\n- send_contact_sms: Send SMS to emergency contact +15146605707  \n- transfer_call: Transfer user to emergency services\n- get_safe_locations: Get nearby safe locations\n\nINSTRUCTIONS:\n- Be warm, professional, and supportive\n- Ask assessment questions to understand the situation\n- Use tools when appropriate (emergency dispatch, SMS alerts, etc.)\n- Keep responses concise for voice calls\n- Take immediate action for emergencies\n- Remember: YOU control everything, VAPI just does voice I/O\n\nRespond naturally as Stacy would, and use function calls when needed.`;\n        const completion = await openai.chat.completions.create({\n            model: \"gpt-4o-mini\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: systemPrompt\n                },\n                ...messages\n            ],\n            functions: [\n                {\n                    name: \"call_demo_police\",\n                    description: \"Call emergency dispatch with briefing\",\n                    parameters: {\n                        type: \"object\",\n                        properties: {\n                            script: {\n                                type: \"string\",\n                                description: \"Briefing for dispatch\"\n                            },\n                            lat: {\n                                type: \"number\",\n                                description: \"Latitude\"\n                            },\n                            lng: {\n                                type: \"number\",\n                                description: \"Longitude\"\n                            }\n                        },\n                        required: [\n                            \"script\"\n                        ]\n                    }\n                },\n                {\n                    name: \"send_contact_sms\",\n                    description: \"Send SMS to emergency contact\",\n                    parameters: {\n                        type: \"object\",\n                        properties: {\n                            phone: {\n                                type: \"string\",\n                                description: \"Phone number\"\n                            },\n                            message: {\n                                type: \"string\",\n                                description: \"SMS message\"\n                            },\n                            urgent: {\n                                type: \"boolean\",\n                                description: \"Is urgent\"\n                            }\n                        },\n                        required: [\n                            \"message\"\n                        ]\n                    }\n                },\n                {\n                    name: \"transfer_call\",\n                    description: \"Transfer call to emergency services\",\n                    parameters: {\n                        type: \"object\",\n                        properties: {\n                            destination: {\n                                type: \"string\",\n                                description: \"Phone number to transfer to\"\n                            },\n                            message: {\n                                type: \"string\",\n                                description: \"Transfer message\"\n                            }\n                        },\n                        required: [\n                            \"destination\"\n                        ]\n                    }\n                }\n            ],\n            function_call: \"auto\",\n            temperature: 0.7,\n            max_tokens: 300\n        });\n        const response = completion.choices[0]?.message;\n        console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN response:\", response);\n        // Handle function calls\n        if (response?.function_call) {\n            const functionName = response.function_call.name;\n            const functionArgs = JSON.parse(response.function_call.arguments || \"{}\");\n            console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN wants to call function:\", functionName, functionArgs);\n            let functionResult = null;\n            // Prevent double calling - check if already triggered for this call\n            if (functionName === \"call_demo_police\" && wasTriggered(callId, \"emergency_conference\")) {\n                console.log(\"\\uD83D\\uDEA8 Emergency conference already created for this call, skipping\");\n                functionResult = {\n                    success: true,\n                    message: \"Emergency response already in progress\"\n                };\n            } else {\n                switch(functionName){\n                    case \"call_demo_police\":\n                        // Use the new 3-way conference system\n                        const userPhone = process.env.DEMO_USER_NUMBER || \"+15146605707\"; // Your phone number\n                        functionResult = await createEmergencyConference(functionArgs.script, userPhone, functionArgs.lat || lat, functionArgs.lng || lng);\n                        // Mark as triggered to prevent duplicates\n                        const set = triggeredByCallId.get(callId) || new Set();\n                        set.add(\"emergency_conference\");\n                        triggeredByCallId.set(callId, set);\n                        break;\n                    case \"send_contact_sms\":\n                        const phone = functionArgs.phone || process.env.DEMO_EMERGENCY_CONTACT || \"+15146605707\";\n                        functionResult = await sendSms(phone, functionArgs.message);\n                        break;\n                    case \"transfer_call\":\n                        functionResult = {\n                            success: true,\n                            transfer: {\n                                destination: functionArgs.destination,\n                                message: functionArgs.message || \"Transferring your call now.\"\n                            }\n                        };\n                        break;\n                }\n            }\n            console.log(\"\\uD83E\\uDDE0 Function result:\", functionResult);\n            // Generate follow-up response after function call\n            const followUpCompletion = await openai.chat.completions.create({\n                model: \"gpt-4o-mini\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    ...messages,\n                    {\n                        role: \"assistant\",\n                        content: response.content || \"\",\n                        function_call: response.function_call\n                    },\n                    {\n                        role: \"function\",\n                        name: functionName,\n                        content: JSON.stringify(functionResult)\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 200\n            });\n            return {\n                response: followUpCompletion.choices[0]?.message?.content || \"Action completed.\",\n                functionCall: {\n                    name: functionName,\n                    result: functionResult\n                },\n                transfer: functionResult?.transfer\n            };\n        }\n        return {\n            response: response?.content || \"I'm here to help. How can I assist you with your safety today?\"\n        };\n    } catch (error) {\n        console.error(\"❌ OpenAI BRAIN error:\", error);\n        return {\n            response: \"I'm having trouble processing right now. If this is an emergency, please call 911 directly.\"\n        };\n    }\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            message: \"Method not allowed\"\n        });\n    }\n    try {\n        const { message } = req.body;\n        console.log(\"\\uD83D\\uDD04 VAPI Webhook received:\", message?.type);\n        // Handle different VAPI message types\n        switch(message?.type){\n            case \"function-call\":\n                console.log(\"\\uD83D\\uDEE0️ Function call:\", message.functionCall?.name);\n                try {\n                    const { name, parameters } = message.functionCall || {};\n                    if (name === \"send_contact_sms\") {\n                        const { phone, message: body, lat, lng, urgent } = parameters || {};\n                        const defaultContact = process.env.DEMO_EMERGENCY_CONTACT || \"+15146605707\";\n                        const toPhone = phone || defaultContact;\n                        const text = `${body}${lat && lng ? `\\n\\nLocation: https://maps.google.com/maps?q=${lat},${lng}` : \"\"}`;\n                        const result = await sendSms(toPhone, text);\n                        return res.json({\n                            result\n                        });\n                    }\n                    if (name === \"call_demo_police\") {\n                        const { script, lat, lng } = parameters || {};\n                        const full = `${script}${lat && lng ? ` Location coordinates ${lat}, ${lng}.` : \"\"}`;\n                        console.log(\"\\uD83D\\uDE94 VAPI calling call_demo_police - creating 3-way conference\");\n                        // Create 3-way conference call\n                        const userPhone = process.env.DEMO_USER_NUMBER || \"+15146605707\"; // Your phone\n                        const conferenceResult = await createEmergencyConference(full, userPhone, lat, lng);\n                        console.log(\"\\uD83C\\uDFAF Conference creation result:\", conferenceResult);\n                        const result = {\n                            success: conferenceResult.success,\n                            message: conferenceResult.message || \"Emergency conference created\",\n                            conferenceId: conferenceResult.conferenceId\n                        };\n                        return res.json({\n                            result\n                        });\n                    }\n                    if (name === \"transfer_to_emergency_services\") {\n                        const { destination, reason } = parameters || {};\n                        const script = `This is Stacy AI. Emergency transfer requested: ${reason}`;\n                        console.log(\"\\uD83D\\uDE94 VAPI calling transfer_to_emergency_services - creating 3-way conference\");\n                        // Create 3-way conference for emergency transfer\n                        const userPhone = process.env.DEMO_USER_NUMBER || \"+15146605707\";\n                        const conferenceResult = await createEmergencyConference(script, userPhone);\n                        console.log(\"\\uD83C\\uDFAF Emergency transfer conference result:\", conferenceResult);\n                        const result = {\n                            success: conferenceResult.success,\n                            message: conferenceResult.message || \"Emergency transfer conference created\",\n                            conferenceId: conferenceResult.conferenceId\n                        };\n                        return res.json({\n                            result\n                        });\n                    }\n                    if (name === \"get_safe_locations\") {\n                        const { lat = 43.4728, lng = -80.5419 } = parameters || {};\n                        return res.json({\n                            result: {\n                                success: true,\n                                locations: [\n                                    {\n                                        name: \"Central Police Station\",\n                                        type: \"police_station\",\n                                        lat: lat + 0.004,\n                                        lng: lng + 0.002,\n                                        distance_m: 450\n                                    },\n                                    {\n                                        name: \"City Hospital Emergency\",\n                                        type: \"hospital\",\n                                        lat: lat - 0.003,\n                                        lng: lng + 0.005,\n                                        distance_m: 680\n                                    },\n                                    {\n                                        name: \"24/7 Cafe Central\",\n                                        type: \"cafe\",\n                                        lat: lat + 0.002,\n                                        lng: lng - 0.001,\n                                        distance_m: 320\n                                    }\n                                ]\n                            }\n                        });\n                    }\n                    return res.json({\n                        result: {\n                            success: false,\n                            error: \"Unknown function\"\n                        }\n                    });\n                } catch (err) {\n                    console.error(\"Function call error:\", err);\n                    return res.json({\n                        result: {\n                            success: false,\n                            error: err?.message || \"Function error\"\n                        }\n                    });\n                }\n            case \"conversation-update\":\n                try {\n                    console.log(\"\\uD83D\\uDD04 CONVERSATION UPDATE - OpenAI BRAIN taking over!\");\n                    const callId = req.body?.message?.call?.id;\n                    const conversation = req.body?.message?.conversation || [];\n                    const metaLocation = req.body?.message?.call?.assistant?.metadata?.location;\n                    const lat = metaLocation?.lat;\n                    const lng = metaLocation?.lng;\n                    console.log(\"\\uD83D\\uDD04 Sending to OpenAI BRAIN:\", {\n                        callId,\n                        conversationLength: conversation.length\n                    });\n                    // 🧠 OpenAI BRAIN processes everything and decides what to do\n                    const brainResult = await processWithOpenAIBrain(callId, conversation, lat, lng);\n                    console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN result:\", brainResult);\n                    // If OpenAI wants to transfer the call, return transfer instruction\n                    if (brainResult.transfer) {\n                        console.log(\"\\uD83D\\uDD04 OpenAI BRAIN requesting call transfer:\", brainResult.transfer);\n                        return res.json({\n                            message: {\n                                type: \"transfer-call\",\n                                destination: brainResult.transfer.destination,\n                                transferMessage: brainResult.transfer.message\n                            }\n                        });\n                    }\n                    // If OpenAI generated a response, we could send it back to VAPI\n                    // (In a full implementation, you'd send this back to VAPI to speak)\n                    if (brainResult.response) {\n                        console.log(\"\\uD83D\\uDDE3️ OpenAI BRAIN wants to say:\", brainResult.response);\n                    }\n                    // OpenAI BRAIN handles everything now - no more heuristics needed!\n                    console.log(\"\\uD83E\\uDDE0 OpenAI BRAIN is in control - skipping old heuristic triggers\");\n                } catch (err) {\n                    console.warn(\"Conversation-update analysis failed:\", err);\n                }\n                return res.json({\n                    received: true\n                });\n            case \"hang\":\n                console.log(\"\\uD83D\\uDCDE Call ended\");\n                return res.json({\n                    received: true\n                });\n            default:\n                console.log(\"ℹ️ Other message type:\", message?.type, \"- OpenAI BRAIN handles all logic now\");\n                return res.json({\n                    received: true\n                });\n        }\n    } catch (error) {\n        console.error(\"VAPI webhook error:\", error);\n        return res.status(500).json({\n            error: error instanceof Error ? error.message : \"Unknown error occurred\"\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/vapi/webhook.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fvapi%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fvapi%2Fwebhook.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();